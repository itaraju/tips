Navigation [3, 4, 6]
--------------------

[count]b/e/w - move backwards/end word/start next word
[count]ge,gE - end of back word

Text objects / Noums:
w - word
s,) - sentence
p,} - paragraph
" - quote
t - tag
b - block
w,W noums: small word, big word, e.g. diw/diW

Parameterized Text objects
i<move> inside
a<move> around
f,F - find next character
t,T - find up to
;/, finds again forward/backward

m<letter> mark to letter - if uppercase then it's Global bookmark
`<letter> - "noum" go to mark
'<letter> - "noum" go to line of mark
'<,'> special marks, last visual range start/end
:marks - show the marks

`` back&forth jump to the last position
'' back&forth jump to the last position, start of line
c-o like ``, but only older positions
c-i like ``, but only newer positions
:jumps - show available jumps

n% go to line n %
L lower line in the screen
M middle
H higher line

zz,z. center screen at current line
zt,zb top, bottom
C-d, C-u half screen Down/Up
C-f, C-b full scree Forward/Backward
C-e,C-y scrool one line up/down

0,^,g_,$ line navigation   
% - search matching parentesis	

[linha]G -goto-line
G - toto-eof
gg - goto-bof

Editing
------------------------------------------------------

vi verbs:
d delete
c change
y yank
v visually select 

Others:
r - replace one caracter
R - in overwrite mode
c-R - redo
p,P - put below/up
yy - yank line
J - join current line with next one
o,O - abrir linhas abaixo/acima

c-a,c-x increade,decrease numbers (normal mode)
{visual}g c-a,c-x form sequence, adding incrementaly

~ change case at character
g~{motion}, {visual}~
gU{motion},gu{motion},gUgU,gugu - upper/lower case

c-o enable normal mode commands in insert mode
:normal in visual mode, enable to run normal model commands

Formating [1]
-------------------------------------------------------

zf - verb fold text
zo - fold open
zc - fold close
:4,10fo - fold lines 4 to 10
zd delete fold
zM close all folds (zm: close more)
zR open all folds (zr: open more)
[z,]z move to start,end of current foldo
zj,zk move to down,up fold

= - verb to ident
> - verb to increase identation
< - verb to decrease identation

gq,gw{motion} - format motion (also visual). Keep cursor if 'w' (handy: set textwidth)
gqq,gqgq,gwgw,gww - same, for line

:Explore - file browser
:[SV]Explore - explore with split screen

Search / replace
------------------------------------------------------

* search the current word
/,? - search forward,backwards
\c,\C ignore case, use case (in search)
n,N - search again forward,backwards
/,// - search again, allowing modifiers

/search/{+-number} line jump after match
/search/[be]{+-number} character jump after match, [be]: begin/end

Regular expressions:
\( \) - groups
\| - alternative
*, \+, \=, - zero+, 1+match, 0/1match
\{n,m}, \{-n,m} - min/max match, min/max match as few as possible
\{-} - from \{-n,m} above, but like *, matching as few as possible
[] character ranges, with ^ being invert
\e, \t, \r, \b - <Esc>, <Tab>, <CR>, <BS> inside []
\d,\D - digit, non-digit - not inside []
\s,\S - space, non-space - not inside []
\w word [0-9A-Za-z_], non: \W
\a alphabetic, non: \A
\l,\L,\u,\U - character cases - not inside []
\n - line break
\<,\> matche start,end of words
\_ - adds linke break to the character class, e.g.: \_s for space or line break, "\_[^"]*"
everything between quotes

:{range}s/old/new/{flag}
new (check :help substitute):
 \0 the whole matched pattern
 \1, ...\9 matched ()
flags:
 g global (multiple substitute)
 c confirm
 n count matches (no substitute)
ranges:
 <empty> current line
 % whole file
 #,# lines and # can be line number or the following:
 . current line
 $ last line
 ?pattern?,/pattern/ searching back/forward
 't,'b marks
 can add {number} to all abore, eg.: .-1,/hey/2

Not using /: use other character after s, e.g.: :s+old+new

Global, execute ex command at matches:
:[range]global/{pattern}/{command}
 default range is current line

Buffers - windows
------------------------------------------------------

:bd - delete buffer
:new
:only
:close

:tabedit <arquivo>
:tab split - cria tab do mesmo arquivo
gt - goto tab

:split/vsplit <arquivo>
vim -0 [arq1] .. [arqn] 
c-w [+/-] resize height
c-w [<>] resize width
c-w w jump to another window
c-w h/j/k/l jump to window on [count] h/j/k/l position

*** diff mode
iniciar com: $vi -d <arq1> ... <arqn>
:set diffopt=icase: ignorar case

External commands [2]
--------------------------------------------------------------

:! <cmd> - run through shell command, if visual, filtering selection
:10,15 ! <cmd> - filter lines 10 to 15
:! wc %  - run wc on current file
:r ! cmd  - read command output
:r <file> insert file

:redi[r] @{a-z,"} - redirect messages to register, if capital letter, or >> (like @a>>), appends
:redi[r] END - ends redirecting
sytem('command') - return result from shell command, e.g. :let @a = system('ls')

Auto completion [1, 3, 5]
----------------------------------------------------
"<register> selects register (e.g., then y or p)
:let @<register>="value"
a-z,A-Z: named registers

special registers:
" (unnamed reg) last yanked/deleted text, from commands d,c,s,x,y
0 last yanked text
1-9 last line deletes
- last small delete
. last inserted text
_ black hole
% name of current file
*,+ system clipboard

All in insert mode:

C-r pick registers (also in ex mode)
C-a last instered text, same as C-r .
c-@ same as c-a<esc> to exit imode
c-y,c-e repeat character from line above/bellow
c-k enter digraphs, check: :digraphs, eg: a*=α b*=β p*=π r*=ρ
c-o {command} executes command in normal mode

C-p complete with Previous text
C-n complete with next text

C-x goto Completion mode, then:
 C-] use ctags to complete
 C-f complete with file name
 C-p previous, but context sensitive (from last completion)
 C-n the same, pulling from something that exists after where the cursor is
 C-l for the line, context awere (can repeat)
 C-o omni completetion (from language)
 C-k words from a dictionary

set complete= check that it has k/kspell (kspell, only completes from dic if set spell)

Spell checking
--------------
set spellang=en_us pt_br

[s,]s previous,next misspeled word
{count}z= get suggestion for word, if {count} the suggestion at {count} is used.
zg mark misspeled word as correct
zw mark good word as misspeled

Other
------------
- ctags: [5, 4]
- :w ++ff=unix - change file format
- The last command entered with ':' can be repeated with @: and further repeats
  can be done with @@
- To determine the ASCII code to use, :echo char2nr("-")
- :args *.c - to set vim's argument list aft its already open

References
==========

[1] https://medium.freecodecamp.org/learn-linux-vim-basic-features-19134461ab85
[2] https://www.linux.com/learn/vim-tips-working-external-commands
[3] https://youtu.be/3TX3kV3TICU - Let Vim do the typing
[4] https://youtu.be/Qem8cpbJeYc - Vim Navigation Commands
[5] https://youtu.be/XA2WjJbmmoM - video no-plugins
[6] https://youtu.be/wlR5gYd6um0 - Mastering the Vim language ("Never hit a ceiling")
